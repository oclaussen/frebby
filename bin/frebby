#!/usr/bin/env ruby
# frozen_string_literal: true

#
# Copyright 2017, Ole Claussen <claussen.ole@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
require 'forwardable'
require 'json'

class Frebby
  extend Forwardable
  def_delegators :@hash, :[], :[]=, :to_json

  class << self
    def _transform_key_hook(key, _data)
      key
    end

    def _transform_value_hook(value, _data)
      value
    end

    def _transform_result_hook(result, _data)
      result
    end
  end

  def initialize(initial = {})
    @hash = initial.clone
  end

  def respond_to_missing?(_symbol, _respond_to = false)
    true
  end

  def method_missing(*args, &blk)
    return super if args.empty? && !block_given?

    set_value = proc { |hash, value, keys|
      raise "Error: #{hash} is not a Hash" unless hash.respond_to?(:[])

      original_key = keys.shift.to_s
      key = Frebby._transform_key_hook(original_key, {})

      unless keys.empty?
        return set_value.call(hash[key] ||= Frebby.new, value, keys)
      end

      existing = hash[key]
      new_value = if existing.nil?
                    value
                  elsif existing.is_a?(Array)
                    (existing + [value])
                  else
                    [existing, value]
                  end

      transform_data = {
        transformed_key: key,
        original_key: original_key,
        target: hash
      }
      hash[key] = Frebby._transform_value_hook(new_value, transform_data)
    }

    value = args.last.is_a?(Hash) || !block_given? ? args.pop : {}
    if block_given?
      value = Frebby.new(value)
      value.instance_eval(&blk)
    end
    set_value.call(@hash, value, args)
  end
end

hash = Frebby.new
hash.instance_eval(ARGF.read)
puts Frebby._transform_result_hook(hash, {}).to_json
