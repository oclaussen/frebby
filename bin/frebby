#!/usr/bin/env ruby
# frozen_string_literal: true

#
# Copyright 2018, Ole Claussen <claussen.ole@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
require 'forwardable'
require 'json'

class Frebby
  extend Forwardable
  def_delegators :@hash, :[], :[]=, :to_json

  def initialize(initial = {}, &blk)
    @hash = initial.clone
    instance_eval(&blk) if block_given?
  end

  def respond_to_missing?(_symbol, _respond_to = false) true end

  def method_missing(name, *args, &blk)
    if args.empty? && !block_given?
      return @hash[Frebby._transform_key_hook name.to_s]
    end
    args.unshift name
    value = args.last.is_a?(Hash) || !block_given? ? args.pop : {}
    value = Frebby.new value, &blk if block_given?
    Frebby._set_value @hash, value, args
  end

  class << self
    def _transform_key_hook(key, **_data) key end

    def _transform_value_hook(value, **_data) value end

    def _transform_result_hook(result, **_data) result end

    def _set_value(hash, value, keys)
      raise "Error: #{hash} is not a Hash" unless hash.respond_to? :[]

      original_key = keys.shift.to_s
      key = _transform_key_hook original_key

      return _set_value(hash[key] ||= new, value, keys) unless keys.empty?

      existing = hash[key]
      new_value = if existing.nil?
                    value
                  elsif existing.is_a? Array
                    existing + [value]
                  else
                    [existing, value]
                  end

      hash[key] = _transform_value_hook new_value,
                                        transformed_key: key,
                                        original_key: original_key,
                                        target: hash
    end
  end
end

item = Frebby.new
ARGF.reduce [] do |lines, line|
  lines << line
  next lines unless ARGF.eof?
  item.instance_eval lines.join, ARGF.filename
  []
end
STDOUT.puts Frebby._transform_result_hook(item).to_json
