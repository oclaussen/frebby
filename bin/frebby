#!/usr/bin/env ruby
# frozen_string_literal: true

#
# Copyright 2017, Ole Claussen <claussen.ole@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
require 'json'

class Frebby
  # rubocop thinks this class is too complicated. Shut up, rubocop.
  # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity
  # rubocop:disable Metrics/MethodLength, Metrics/PerceivedComplexity
  extend Forwardable

  def initialize
    @hash = {}
  end

  def_delegators :@hash, :[], :[]=, :to_json

  def self._transform_key(key)
    key.to_s
  end

  def self._transform_value(value, _key)
    value
  end

  def respond_to_missing?(_symbol, _respond_to = false)
    true
  end

  def method_missing(name, arg = nil, &blk)
    return super if !block_given? && arg.nil?
    key = Frebby._transform_key(name)
    value = arg

    if block_given?
      value = Frebby.new
      value.instance_eval(&blk)
    end

    if block_given? && !arg.nil?
      existing = @hash[key] || Frebby.new
      existing[arg] = value
      value = existing
    elsif @hash.key?(key)
      existing = @hash[key]
      value = existing.is_a?(Array) ? (existing + [value]) : [existing, value]
    end

    @hash[key] = Frebby._transform_value(value, key)
  end

  # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity
  # rubocop:enable Metrics/MethodLength, Metrics/PerceivedComplexity
end

hash = Frebby.new
hash.instance_eval(ARGF.read)
puts hash.to_json
