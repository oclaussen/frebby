#!/usr/bin/env ruby
# frozen_string_literal: true

#
# Copyright 2017, Ole Claussen <claussen.ole@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
require 'forwardable'
require 'json'

class Frebby
  extend Forwardable

  def initialize(initial = {})
    @hash = initial.clone
  end

  def_delegators :@hash, :[], :[]=, :to_json

  def respond_to_missing?(_symbol, _respond_to = false)
    true
  end

  def method_missing(name, *args, &blk)
    return super if args.empty? && !block_given?
    args.unshift(name)
    value = args.last.is_a?(Hash) || !block_given? ? args.pop : {}
    if block_given?
      value = Frebby.new(value)
      value.instance_eval(&blk)
    end
    Frebby._set_value(@hash, value, *args)
  end

  class << self
    def _transform_key(key)
      key.to_s
    end

    def _transform_value(value, original_key, target)
      key = _transform_key(original_key)
      existing = target[key]
      if existing.nil?
        value
      elsif existing.is_a?(Array)
        (existing + [value])
      else
        [existing, value]
      end
    end

    def _transform_result(result)
      result
    end

    def _set_value(target, value, *keys)
      raise '_set_value keys empty. This should not happen' if keys.empty?
      raise "Error: #{target} is not a Hash" unless target.respond_to?(:[])

      key = keys.shift
      if keys.empty?
        target[_transform_key(key)] = _transform_value(value, key, target)
      else
        _set_value(target[_transform_key(key)] ||= Frebby.new, value, *keys)
      end
    end
  end
end

hash = Frebby.new
hash.instance_eval(ARGF.read)
puts Frebby._transform_result(hash).to_json
